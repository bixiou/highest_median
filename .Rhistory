load("~/www/highest_median/.RData")
source("packages_functions_data.R")
source("packages_functions_data.R")
source("packages_functions_data.R")
install.packages(readODS)
install.packages("readODS")
package("readODS")
package('Rtools')
elec2017
score('n', grades=c(0.2,0.5,.3))
score('nu', grades=c(0.2,0.5,0.3))
score('mj', grades=c(0.2,0.5,0.3))
score('n', grades=c(0.2,0.5,.3), scale=-1:1)
gauge(c(0.2, 0.5, 0.3))
gauge(c(0.2, 0.5, 0.3), return='g')
gauge(c(0.2, 0.5, 0.3), return='all')
score('s', grades=c(0.2,0.5,.3))
score('s', grades=c(0.2,.8))
c((floor(-2/2)+1):(2+floor(-2/2)))
gauge(grades=c(0.2,.8))
gauge(grades=c(0.8,.2))
score('s', grades=c(0.8,.2))
package("readODS")
install.packages('readODS')
Rversion()
RVersion()
R.Version()
score('s', grades=c(0,0.8,.2,0))
score('s', grades=c(0,0.2,.8,0))
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, name="", print = T, return_text = FALSE, scale=-2:4) {
grades <- grades / sum(grades)
# if (length(scale) != length(grades) & length(grades)==3) scale <- -1:1
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+10^(-10))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
# if (g == min(scale)) { g <- g+1; q <- 1-p; }
# if (g == max(scale)) { g <- g-1; p <- 1-q; }
# return(g + (p*(q<0.5)-q*(p<0.5))/((2*(1-p-q))^(pmax(p,q)<0.5))) }
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, s, D, n or mean.")
} # mj, s, d or mean
score('s', grades=c(0,0.2,.8,0))
score('s', grades=c(0,0.8,.2,0))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+10^(-3))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, name="", print = T, return_text = FALSE, scale=-2:4) {
grades <- grades / sum(grades)
# if (length(scale) != length(grades) & length(grades)==3) scale <- -1:1
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+10^(-3))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
# if (g == min(scale)) { g <- g+1; q <- 1-p; }
# if (g == max(scale)) { g <- g-1; p <- 1-q; }
# return(g + (p*(q<0.5)-q*(p<0.5))/((2*(1-p-q))^(pmax(p,q)<0.5))) }
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, s, D, n or mean.")
} # mj, s, d or mean
score('s', grades=c(0,0.8,.2,0))
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, name="", print = T, return_text = FALSE, scale=-2:4) {
grades <- grades / sum(grades)
# if (length(scale) != length(grades) & length(grades)==3) scale <- -1:1
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+10^(-6))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
# if (g == min(scale)) { g <- g+1; q <- 1-p; }
# if (g == max(scale)) { g <- g-1; p <- 1-q; }
# return(g + (p*(q<0.5)-q*(p<0.5))/((2*(1-p-q))^(pmax(p,q)<0.5))) }
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, s, D, n or mean.")
} # mj, s, d or mean
score('s', grades=c(0,0.8,.2,0))
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, name="", print = T, return_text = FALSE, scale=-2:4) {
grades <- grades / sum(grades)
# if (length(scale) != length(grades) & length(grades)==3) scale <- -1:1
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+10^(-7))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
# if (g == min(scale)) { g <- g+1; q <- 1-p; }
# if (g == max(scale)) { g <- g-1; p <- 1-q; }
# return(g + (p*(q<0.5)-q*(p<0.5))/((2*(1-p-q))^(pmax(p,q)<0.5))) }
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, s, D, n or mean.")
} # mj, s, d or mean
score('s', grades=c(0,0.8,.2,0))
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, name="", print = T, return_text = FALSE, scale=-2:4) {
grades <- grades / sum(grades)
# if (length(scale) != length(grades) & length(grades)==3) scale <- -1:1
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+10^(-8))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
# if (g == min(scale)) { g <- g+1; q <- 1-p; }
# if (g == max(scale)) { g <- g-1; p <- 1-q; }
# return(g + (p*(q<0.5)-q*(p<0.5))/((2*(1-p-q))^(pmax(p,q)<0.5))) }
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, s, D, n or mean.")
} # mj, s, d or mean
score('s', grades=c(0,0.8,.2,0))
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, name="", print = T, return_text = FALSE, scale=-2:4) {
grades <- grades / sum(grades)
# if (length(scale) != length(grades) & length(grades)==3) scale <- -1:1
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+10^(-7))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
# if (g == min(scale)) { g <- g+1; q <- 1-p; }
# if (g == max(scale)) { g <- g-1; p <- 1-q; }
# return(g + (p*(q<0.5)-q*(p<0.5))/((2*(1-p-q))^(pmax(p,q)<0.5))) }
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, s, D, n or mean.")
} # mj, s, d or mean
score('s', grades=c(0,0.8,.2,0))
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, name="", print = T, return_text = FALSE, scale=-2:4) {
grades <- grades / sum(grades)
# if (length(scale) != length(grades) & length(grades)==3) scale <- -1:1
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+5*10^(-7))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
# if (g == min(scale)) { g <- g+1; q <- 1-p; }
# if (g == max(scale)) { g <- g-1; p <- 1-q; }
# return(g + (p*(q<0.5)-q*(p<0.5))/((2*(1-p-q))^(pmax(p,q)<0.5))) }
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, s, D, n or mean.")
} # mj, s, d or mean
score('s', grades=c(0,0.8,.2,0))
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, name="", print = T, return_text = FALSE, scale=-2:4) {
grades <- grades / sum(grades)
# if (length(scale) != length(grades) & length(grades)==3) scale <- -1:1
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+5*10^(-8))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
# if (g == min(scale)) { g <- g+1; q <- 1-p; }
# if (g == max(scale)) { g <- g-1; p <- 1-q; }
# return(g + (p*(q<0.5)-q*(p<0.5))/((2*(1-p-q))^(pmax(p,q)<0.5))) }
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, s, D, n or mean.")
} # mj, s, d or mean
score('s', grades=c(0,0.8,.2,0))
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, name="", print = T, return_text = FALSE, scale=-2:4) {
grades <- grades / sum(grades)
# if (length(scale) != length(grades) & length(grades)==3) scale <- -1:1
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+8*10^(-8))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
# if (g == min(scale)) { g <- g+1; q <- 1-p; }
# if (g == max(scale)) { g <- g-1; p <- 1-q; }
# return(g + (p*(q<0.5)-q*(p<0.5))/((2*(1-p-q))^(pmax(p,q)<0.5))) }
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, s, D, n or mean.")
} # mj, s, d or mean
score('s', grades=c(0,0.8,.2,0))
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, name="", print = T, return_text = FALSE, scale=-2:4) {
grades <- grades / sum(grades)
# if (length(scale) != length(grades) & length(grades)==3) scale <- -1:1
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+2*10^(-8))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
# if (g == min(scale)) { g <- g+1; q <- 1-p; }
# if (g == max(scale)) { g <- g-1; p <- 1-q; }
# return(g + (p*(q<0.5)-q*(p<0.5))/((2*(1-p-q))^(pmax(p,q)<0.5))) }
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, s, D, n or mean.")
} # mj, s, d or mean
score('s', grades=c(0,0.8,.2,0))
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, name="", print = T, return_text = FALSE, scale=-2:4) {
grades <- grades / sum(grades)
# if (length(scale) != length(grades) & length(grades)==3) scale <- -1:1
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
# else if (rule=="s") return(as.numeric(g + 0.5*(p/(p+q) +k-1 + (p*q==0)*(p-q) + (p+q==0)*0.5))) # old
# else if (rule=="s") return(as.numeric(g + 0.5*((p-q)/(p+q)) )) # simple
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+3*10^(-8))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
# if (g == min(scale)) { g <- g+1; q <- 1-p; }
# if (g == max(scale)) { g <- g-1; p <- 1-q; }
# return(g + (p*(q<0.5)-q*(p<0.5))/((2*(1-p-q))^(pmax(p,q)<0.5))) }
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, s, D, n or mean.")
} # mj, s, d or mean
score('s', grades=c(0,0.8,.2,0))
score('s', grades=c(0,0.2,.8,0))
1/(3*10^(-8))
rules
source("packages_functions_data.R")
##### 6. The different rules in practice #####
nb_pairs <- (6*7+9*10+10*11+11*12)/2 # 187
kendall_distances <- rankings(return_distance=T)+rankings(grades=elec2017, names=candidats_2017, scale=-2:3, return_distance=T)+rankings(grades=distributions, names=distributions_names, scale=-2:2, return_distance=T)+rankings(grades=laprimaire, names=rownames(laprimaire), scale=-2:2, return_distance=T)
# Random reallocation of 2% of grades: dp+dq=reallocation, sgn(dp) and sgn(dq) are independent and equiprobable -/+.
reallocation <- 0.02
start <- Sys.time() # 1.7h
n <- 100000
min_group <- 0
max_group <- 0.5
p1s <- runif(n, min_group, max_group)
q1s <- runif(n, min_group, max_group)
p2s <- runif(n, min_group, max_group)
q2s <- runif(n, min_group, max_group)
# distribution of scores for each rule. Then average percentile change in distribution triggered by random reallocation of 2% of votes.
scores <- list()
for (rule in rules) scores[[rule]] <- aggregate_scores(rule = rule, grades = data.frame(list(q=q1s, r=1-p1s-q1s, p=p1s)), rounds=FALSE)
# plot_rules(scores, "cdf", xlab="Score (x)", ylab="Share with score < x")
reallocation <- 0.02
dps2 <- runif(n, 0, reallocation/2)
dqs2 <- runif(n, 0, reallocation/2)
P1s2 <- p1s + sign(round(1e4 * dps2) %% 2 - 0.5) * dps2
Q1s2 <- q1s + sign(round(1e6 * dqs2) %% 2 - 0.5) * dqs2
distribution_scores2 <- list()
for (rule in rules) distribution_scores2[[rule]] <- ecdf(scores[[rule]])
new_scores2 <- list()
for (rule in rules) new_scores2[[rule]] <- aggregate_scores(rule = rule, grades = data.frame(list(q=Q1s2, r=1-P1s2-Q1s2, p=P1s2)), rounds=FALSE)
rank_shift2 <- list()
for (rule in rules) rank_shift2[[rule]] <- abs(distribution_scores2[[rule]](new_scores2[[rule]]) - distribution_scores2[[rule]](scores[[rule]]))
Sys.time() - start
source("packages_functions_data.R")
start <- Sys.time() # 1.7h
n <- 100000
min_group <- 0
max_group <- 0.5
p1s <- runif(n, min_group, max_group)
q1s <- runif(n, min_group, max_group)
p2s <- runif(n, min_group, max_group)
q2s <- runif(n, min_group, max_group)
# distribution of scores for each rule. Then average percentile change in distribution triggered by random reallocation of 2% of votes.
scores <- list()
for (rule in rules) scores[[rule]] <- aggregate_scores(rule = rule, grades = data.frame(list(q=q1s, r=1-p1s-q1s, p=p1s)), rounds=FALSE)
reallocation <- 0.02
dps2 <- runif(n, 0, reallocation/2)
dqs2 <- runif(n, 0, reallocation/2)
P1s2 <- p1s + sign(round(1e4 * dps2) %% 2 - 0.5) * dps2
Q1s2 <- q1s + sign(round(1e6 * dqs2) %% 2 - 0.5) * dqs2
distribution_scores2 <- list()
for (rule in rules) distribution_scores2[[rule]] <- ecdf(scores[[rule]])
new_scores2 <- list()
for (rule in rules) new_scores2[[rule]] <- aggregate_scores(rule = rule, grades = data.frame(list(q=Q1s2, r=1-P1s2-Q1s2, p=P1s2)), rounds=FALSE)
rank_shift2 <- list()
for (rule in rules) rank_shift2[[rule]] <- abs(distribution_scores2[[rule]](new_scores2[[rule]]) - distribution_scores2[[rule]](scores[[rule]]))
Sys.time() - start
save.image("~/www/highest_median/.RData")
# Figure 4 bis: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift2, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Figure 4: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Table 4 bis: probabilities of large and very large shifts
length(which(rank_shift2$D > 0.2))/n # 0.00796
length(which(rank_shift2$s > 0.2))/n # 0.01638
length(which(rank_shift2$n > 0.2))/n # 0.00392
length(which(rank_shift2$mj > 0.2))/n # 0.01638
length(which(rank_shift2$D > 0.5))/n # 0.00023
length(which(rank_shift2$s > 0.5))/n # 0.00089
length(which(rank_shift2$n > 0.5))/n # 0.0005
length(which(rank_shift2$mj > 0.5))/n # 0.00898
start <- Sys.time() # 1.7h
n <- 100000
min_group <- 0
max_group <- 0.5
p1s <- runif(n, min_group, max_group)
q1s <- runif(n, min_group, max_group)
p2s <- runif(n, min_group, max_group)
q2s <- runif(n, min_group, max_group)
reallocation <- 0.02
dps2 <- runif(n, 0, reallocation)
dqs2 <- runif(n, 0, reallocation)
P1s2 <- p1s + sign(round(1e4 * dps2) %% 2 - 0.5) * dps2
Q1s2 <- q1s + sign(round(1e6 * dqs2) %% 2 - 0.5) * dqs2
distribution_scores2 <- list()
for (rule in rules) distribution_scores2[[rule]] <- ecdf(scores[[rule]])
new_scores2 <- list()
for (rule in rules) new_scores2[[rule]] <- aggregate_scores(rule = rule, grades = data.frame(list(q=Q1s2, r=1-P1s2-Q1s2, p=P1s2)), rounds=FALSE)
rank_shift2 <- list()
for (rule in rules) rank_shift2[[rule]] <- abs(distribution_scores2[[rule]](new_scores2[[rule]]) - distribution_scores2[[rule]](scores[[rule]]))
Sys.time() - start
# Figure 4 bis: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift2, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Table 4 bis: probabilities of large and very large shifts
length(which(rank_shift2$D > 0.2))/n # 0.00353
length(which(rank_shift2$s > 0.2))/n # 0.00682
length(which(rank_shift2$n > 0.2))/n # 0.0011
length(which(rank_shift2$mj > 0.2))/n # 0.00758
length(which(rank_shift2$D > 0.5))/n # 6e-05
length(which(rank_shift2$s > 0.5))/n # 0.00017
length(which(rank_shift2$n > 0.5))/n # 0.00011
length(which(rank_shift2$mj > 0.5))/n # 0.00405
[1:10]
dps2[1:10]
(P1s2*p1s)[1:10]
sign(round(1e4 * dps2) %% 2 - 0.5)[1:10]
(round(1e4 * dps2) %% 2 - 0.5)[1:10]
(round(1e4 * dps2))[1:10]
(round(1e4 * dps2))[1:20]
(round(1e4 * dps2) %% 2)[1:20]
(round(1e4 * dps2) %% 2 - 0.5)[1:20]
sihn(round(1e4 * dps2) %% 2 - 0.5)[1:20]
(P1s2-p1s)[1:10]
(P1s-p1s)[1:10]
(Q1s2-q2s)[1:10]
(Q1s2-q1s)[1:10]
# distribution of scores for each rule. Then average percentile change in distribution triggered by random reallocation of 2% of votes.
scores <- list()
for (rule in rules) scores[[rule]] <- aggregate_scores(rule = rule, grades = data.frame(list(q=q1s, r=1-p1s-q1s, p=p1s)), rounds=FALSE)
# Table 4: probabilities of large and very large shifts
length(which(rank_shift$D > 0.2))/n # 0.00796
length(which(rank_shift$s > 0.2))/n # 0.01638
length(which(rank_shift$n > 0.2))/n # 0.00392
length(which(rank_shift$mj > 0.2))/n # 0.01638
length(which(rank_shift$D > 0.5))/n # 0.00023
length(which(rank_shift$s > 0.5))/n # 0.00089
load("~/www/highest_median/.RData")
# Table 4: probabilities of large and very large shifts
length(which(rank_shift$D > 0.2))/n # 0.00796
length(which(rank_shift$s > 0.2))/n # 0.01638
rank_shift2 <- list()
for (rule in rules) rank_shift2[[rule]] <- abs(distribution_scores[[rule]](new_scores2[[rule]]) - distribution_scores[[rule]](scores[[rule]]))
# Figure 4 bis: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift2, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Figure 4: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
start <- Sys.time() # 1.7h
reallocation <- 0.02
dps2 <- runif(n, 0, reallocation)
dqs2 <- runif(n, 0, reallocation)
P1s2 <- p1s + sign(round(1e4 * dps2) %% 2 - 0.5) * dps2
Q1s2 <- q1s + sign(round(1e6 * dqs2) %% 2 - 0.5) * dqs2
new_scores2 <- list()
for (rule in rules) new_scores2[[rule]] <- aggregate_scores(rule = rule, grades = data.frame(list(q=Q1s2, r=1-P1s2-Q1s2, p=P1s2)), rounds=FALSE)
rank_shift2 <- list()
for (rule in rules) rank_shift2[[rule]] <- abs(distribution_scores[[rule]](new_scores2[[rule]]) - distribution_scores[[rule]](scores[[rule]]))
Sys.time() - start
alarm()
install.packages("beepr")
library(beepr)
beep()
alarm()
alarm()
# Figure 4 bis: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift2, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Figure 4: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Table 4 bis: probabilities of large and very large shifts
length(which(rank_shift2$D > 0.2))/n # 0.00353
length(which(rank_shift2$s > 0.2))/n # 0.00682
length(which(rank_shift2$n > 0.2))/n # 0.0011
length(which(rank_shift2$mj > 0.2))/n # 0.00758
length(which(rank_shift2$D > 0.5))/n # 6e-05
length(which(rank_shift2$s > 0.5))/n # 0.00017
length(which(rank_shift2$n > 0.5))/n # 0.00011
length(which(rank_shift2$mj > 0.5))/n # 0.00405
# Figure 4 bis: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift2, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Figure 4: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Table 4: probabilities of large and very large shifts
length(which(rank_shift$D > 0.2))/n # 0.00796
length(which(rank_shift$s > 0.2))/n # 0.01638
length(which(rank_shift$n > 0.2))/n # 0.00392
length(which(rank_shift$mj > 0.2))/n # 0.01638
length(which(rank_shift$D > 0.5))/n # 0.00023
length(which(rank_shift$s > 0.5))/n # 0.00089
length(which(rank_shift$n > 0.5))/n # 0.0005
length(which(rank_shift$mj > 0.5))/n # 0.00898
