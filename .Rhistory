reallocation <- 0.02
dps2 <- runif(n, 0, reallocation/2)
dqs2 <- runif(n, 0, reallocation/2)
P1s2 <- p1s + sign(round(1e4 * dps2) %% 2 - 0.5) * dps2
Q1s2 <- q1s + sign(round(1e6 * dqs2) %% 2 - 0.5) * dqs2
distribution_scores2 <- list()
for (rule in rules) distribution_scores2[[rule]] <- ecdf(scores[[rule]])
new_scores2 <- list()
for (rule in rules) new_scores2[[rule]] <- aggregate_scores(rule = rule, grades = data.frame(list(q=Q1s2, r=1-P1s2-Q1s2, p=P1s2)), rounds=FALSE)
rank_shift2 <- list()
for (rule in rules) rank_shift2[[rule]] <- abs(distribution_scores2[[rule]](new_scores2[[rule]]) - distribution_scores2[[rule]](scores[[rule]]))
Sys.time() - start
save.image("~/www/highest_median/.RData")
# Figure 4 bis: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift2, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Figure 4: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Table 4 bis: probabilities of large and very large shifts
length(which(rank_shift2$D > 0.2))/n # 0.00796
length(which(rank_shift2$s > 0.2))/n # 0.01638
length(which(rank_shift2$n > 0.2))/n # 0.00392
length(which(rank_shift2$mj > 0.2))/n # 0.01638
length(which(rank_shift2$D > 0.5))/n # 0.00023
length(which(rank_shift2$s > 0.5))/n # 0.00089
length(which(rank_shift2$n > 0.5))/n # 0.0005
length(which(rank_shift2$mj > 0.5))/n # 0.00898
start <- Sys.time() # 1.7h
n <- 100000
min_group <- 0
max_group <- 0.5
p1s <- runif(n, min_group, max_group)
q1s <- runif(n, min_group, max_group)
p2s <- runif(n, min_group, max_group)
q2s <- runif(n, min_group, max_group)
reallocation <- 0.02
dps2 <- runif(n, 0, reallocation)
dqs2 <- runif(n, 0, reallocation)
P1s2 <- p1s + sign(round(1e4 * dps2) %% 2 - 0.5) * dps2
Q1s2 <- q1s + sign(round(1e6 * dqs2) %% 2 - 0.5) * dqs2
distribution_scores2 <- list()
for (rule in rules) distribution_scores2[[rule]] <- ecdf(scores[[rule]])
new_scores2 <- list()
for (rule in rules) new_scores2[[rule]] <- aggregate_scores(rule = rule, grades = data.frame(list(q=Q1s2, r=1-P1s2-Q1s2, p=P1s2)), rounds=FALSE)
rank_shift2 <- list()
for (rule in rules) rank_shift2[[rule]] <- abs(distribution_scores2[[rule]](new_scores2[[rule]]) - distribution_scores2[[rule]](scores[[rule]]))
Sys.time() - start
# Figure 4 bis: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift2, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Table 4 bis: probabilities of large and very large shifts
length(which(rank_shift2$D > 0.2))/n # 0.00353
length(which(rank_shift2$s > 0.2))/n # 0.00682
length(which(rank_shift2$n > 0.2))/n # 0.0011
length(which(rank_shift2$mj > 0.2))/n # 0.00758
length(which(rank_shift2$D > 0.5))/n # 6e-05
length(which(rank_shift2$s > 0.5))/n # 0.00017
length(which(rank_shift2$n > 0.5))/n # 0.00011
length(which(rank_shift2$mj > 0.5))/n # 0.00405
[1:10]
dps2[1:10]
(P1s2*p1s)[1:10]
sign(round(1e4 * dps2) %% 2 - 0.5)[1:10]
(round(1e4 * dps2) %% 2 - 0.5)[1:10]
(round(1e4 * dps2))[1:10]
(round(1e4 * dps2))[1:20]
(round(1e4 * dps2) %% 2)[1:20]
(round(1e4 * dps2) %% 2 - 0.5)[1:20]
sihn(round(1e4 * dps2) %% 2 - 0.5)[1:20]
(P1s2-p1s)[1:10]
(P1s-p1s)[1:10]
(Q1s2-q2s)[1:10]
(Q1s2-q1s)[1:10]
# distribution of scores for each rule. Then average percentile change in distribution triggered by random reallocation of 2% of votes.
scores <- list()
for (rule in rules) scores[[rule]] <- aggregate_scores(rule = rule, grades = data.frame(list(q=q1s, r=1-p1s-q1s, p=p1s)), rounds=FALSE)
# Table 4: probabilities of large and very large shifts
length(which(rank_shift$D > 0.2))/n # 0.00796
length(which(rank_shift$s > 0.2))/n # 0.01638
length(which(rank_shift$n > 0.2))/n # 0.00392
length(which(rank_shift$mj > 0.2))/n # 0.01638
length(which(rank_shift$D > 0.5))/n # 0.00023
length(which(rank_shift$s > 0.5))/n # 0.00089
load("~/www/highest_median/.RData")
# Table 4: probabilities of large and very large shifts
length(which(rank_shift$D > 0.2))/n # 0.00796
length(which(rank_shift$s > 0.2))/n # 0.01638
rank_shift2 <- list()
for (rule in rules) rank_shift2[[rule]] <- abs(distribution_scores[[rule]](new_scores2[[rule]]) - distribution_scores[[rule]](scores[[rule]]))
# Figure 4 bis: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift2, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Figure 4: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
start <- Sys.time() # 1.7h
reallocation <- 0.02
dps2 <- runif(n, 0, reallocation)
dqs2 <- runif(n, 0, reallocation)
P1s2 <- p1s + sign(round(1e4 * dps2) %% 2 - 0.5) * dps2
Q1s2 <- q1s + sign(round(1e6 * dqs2) %% 2 - 0.5) * dqs2
new_scores2 <- list()
for (rule in rules) new_scores2[[rule]] <- aggregate_scores(rule = rule, grades = data.frame(list(q=Q1s2, r=1-P1s2-Q1s2, p=P1s2)), rounds=FALSE)
rank_shift2 <- list()
for (rule in rules) rank_shift2[[rule]] <- abs(distribution_scores[[rule]](new_scores2[[rule]]) - distribution_scores[[rule]](scores[[rule]]))
Sys.time() - start
alarm()
install.packages("beepr")
library(beepr)
beep()
alarm()
alarm()
# Figure 4 bis: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift2, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Figure 4: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Table 4 bis: probabilities of large and very large shifts
length(which(rank_shift2$D > 0.2))/n # 0.00353
length(which(rank_shift2$s > 0.2))/n # 0.00682
length(which(rank_shift2$n > 0.2))/n # 0.0011
length(which(rank_shift2$mj > 0.2))/n # 0.00758
length(which(rank_shift2$D > 0.5))/n # 6e-05
length(which(rank_shift2$s > 0.5))/n # 0.00017
length(which(rank_shift2$n > 0.5))/n # 0.00011
length(which(rank_shift2$mj > 0.5))/n # 0.00405
# Figure 4 bis: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift2, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Figure 4: CDF of quantile shifts following a random reallocation of 2% of grades
plot_rules(rank_shift, "cdf", xlab="Quantile shift (r)", ylab="Share with quantile shift < r", ylim=c(0.96,1), xlim=c(0.1, 1))
# Table 4: probabilities of large and very large shifts
length(which(rank_shift$D > 0.2))/n # 0.00796
length(which(rank_shift$s > 0.2))/n # 0.01638
length(which(rank_shift$n > 0.2))/n # 0.00392
length(which(rank_shift$mj > 0.2))/n # 0.01638
length(which(rank_shift$D > 0.5))/n # 0.00023
length(which(rank_shift$s > 0.5))/n # 0.00089
length(which(rank_shift$n > 0.5))/n # 0.0005
length(which(rank_shift$mj > 0.5))/n # 0.00898
share_1 <- .2
share2 <- .1
max_p <- 1-share_1-share2
steps <- 1000
xs <- seq(1/steps, max_p, 1/steps)
old_mar <- par()$mar
par(mar=c(3.1, 3.1, 0.1, 0.1))
example_grades <- cbind(share_1, max_p-xs, xs, share2)
plot(xs, aggregate_scores('n', example_grades), type='l', col='green', lwd=2, lty=1, xlim=c(0,max_p), ylim=c(-0.3,1), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[1:steps*(.5-share2)], aggregate_scores('s', example_grades[1:steps*(.5-share2),]), type='l', col='blue', lwd=2, lty=3)
lines(xs[1:steps*(.5-share2)], aggregate_scores('d', example_grades[1:steps*(.5-share2),]), type='l', col='red', lwd=2, lty=2)
lines(xs[(steps*(share_1-share2)+1):(steps*max_p)], aggregate_scores('mj', example_grades[(steps*(share_1-share2)+1):(steps*max_p),]), type='l', col='black', lwd=2, lty=1)
lines(xs[1:(steps*(share_1-share2))], aggregate_scores('mj', example_grades[1:(steps*(share_1-share2)),]), type='l', col='black', lwd=2, lty=1)
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('d', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='red', lwd=2, lty=2, ylim=c(-0.5,max_p), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('s', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='blue', lwd=2, lty=3)
legend('bottomright', col=c('red', 'blue', 'green', 'black'), lwd=2, lty=c(2,3,1,1), legend=c(expression(italic(d)), expression(italic(s)), expression(italic(n)), expression(italic(mj))), title='Score')
mtext(text = expression(paste(italic(x),  ': share of grades +1')), side = 1, line = 2.2) + mtext(text = 'Score', side = 2, line = 2.2)
par(mar=old_mar) #  (given 10% of -1, 10% of +2, x of +1 and the rest of 0)
share_1 <- .2
share2 <- .1
max_p <- 1-share_1-share2
steps <- 1000
xs <- seq(1/steps, max_p, 1/steps)
old_mar <- par()$mar
par(mar=c(3.1, 3.1, 0.1, 0.1))
example_grades <- cbind(share_1, max_p-xs, xs, share2)
plot(xs, aggregate_scores('n', example_grades), type='l', col='green', lwd=2, lty=1, xlim=c(0,max_p), ylim=c(-0.3,1), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[1:steps*(.5-share2)], aggregate_scores('s', example_grades[1:steps*(.5-share2),]), type='l', col='blue', lwd=2, lty=3)
lines(xs[1:steps*(.5-share2)], aggregate_scores('d', example_grades[1:steps*(.5-share2),]), type='l', col='red', lwd=2, lty=2)
lines(xs[(steps*(share_1-share2)+1):(steps*max_p)], aggregate_scores('mj', example_grades[(steps*(share_1-share2)+1):(steps*max_p),]), type='l', col='black', lwd=2, lty=1)
lines(xs[1:(steps*(share_1-share2))], aggregate_scores('mj', example_grades[1:(steps*(share_1-share2)),]), type='l', col='black', lwd=2, lty=1)
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('d', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='red', lwd=2, lty=2, ylim=c(-0.5,max_p), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('s', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='blue', lwd=2, lty=3)
legend('bottomright', col=c('red', 'blue', 'green', 'black'), lwd=2, lty=c(2,3,1,1), legend=c(expression(italic(d)), expression(italic(s)), expression(italic(n)), expression(italic(mj))), title='Score')
mtext(text = expression(paste(italic(x),  ': share of grades +1')), side = 1, line = 2.2) + mtext(text = 'Score', side = 2, line = 2.2)
par(mar=old_mar) #  (given 10% of -1, 10% of +2, x of +1 and the rest of 0)
share_1 <- .2
share2 <- .1
max_p <- 1-share_1-share2
steps <- 1000
xs <- seq(1/steps, max_p, 1/steps)
old_mar <- par()$mar
par(mar=c(3.1, 3.1, 0.1, 0.1))
example_grades <- cbind(share_1, max_p-xs, xs, share2)
plot(xs, aggregate_scores('n', example_grades), type='l', col='green', lwd=2, lty=1, xlim=c(0,max_p), ylim=c(-0.3,1), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[1:steps*(.5-share2)], aggregate_scores('s', example_grades[1:steps*(.5-share2),]), type='l', col='blue', lwd=2, lty=3)
lines(xs[1:steps*(.5-share2)], aggregate_scores('d', example_grades[1:steps*(.5-share2),]), type='l', col='red', lwd=2, lty=2)
lines(xs[(steps*(share_1-share2)+1):(steps*max_p)], aggregate_scores('mj', example_grades[(steps*(share_1-share2)+1):(steps*max_p),]), type='l', col='black', lwd=2, lty=1)
lines(xs[1:(steps*(share_1-share2))], aggregate_scores('mj', example_grades[1:(steps*(share_1-share2)),]), type='l', col='black', lwd=2, lty=1)
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('d', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='red', lwd=2, lty=2, ylim=c(-0.5,max_p), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('s', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='blue', lwd=2, lty=3)
legend('bottomright', col=c('red', 'blue', 'green', 'black'), lwd=2, lty=c(2,3,1,1), legend=c(expression(italic(d)), expression(italic(s)), expression(italic(n)), expression(italic(mj))), title='Score')
mtext(text = expression(paste(italic(x),  ': share of grades +1')), side = 1, line = 2.2) + mtext(text = 'Score', side = 2, line = 2.2)
par(mar=old_mar) #  (given 10% of -1, 10% of +2, x of +1 and the rest of 0)
share_1 <- .2
share2 <- .1
max_p <- 1-share_1-share2
steps <- 1000
xs <- seq(1/steps, max_p, 1/steps)
old_mar <- par()$mar
par(mar=c(3.1, 3.1, 0.1, 0.1))
example_grades <- cbind(share_1, max_p-xs, xs, share2)
plot(xs, aggregate_scores('n', example_grades), type='l', col='green', lwd=2, lty=1, xlim=c(0,max_p), ylim=c(-0.3,1), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[1:steps*(.5-share2)], aggregate_scores('s', example_grades[1:steps*(.5-share2),]), type='l', col='blue', lwd=2, lty=3)
lines(xs[1:steps*(.5-share2)], aggregate_scores('d', example_grades[1:steps*(.5-share2),]), type='l', col='red', lwd=2, lty=2)
lines(xs[(steps*(share_1-share2)+1):(steps*max_p)], aggregate_scores('mj', example_grades[(steps*(share_1-share2)+1):(steps*max_p),]), type='l', col='black', lwd=2, lty=1)
lines(xs[1:(steps*(share_1-share2))], aggregate_scores('mj', example_grades[1:(steps*(share_1-share2)),]), type='l', col='black', lwd=2, lty=1)
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('d', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='red', lwd=2, lty=2, ylim=c(-0.5,max_p), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('s', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='blue', lwd=2, lty=3)
legend('bottomright', col=c('red', 'blue', 'green', 'black'), lwd=2, lty=c(2,3,1,1), legend=c(expression(italic(d)), expression(italic(s)), expression(italic(n)), expression(italic(mj))), title='Score')
mtext(text = expression(paste(italic(x),  ': share of grades +1')), side = 1, line = 2.2) + mtext(text = 'Score', side = 2, line = 2.2)
par(mar=old_mar) #  (given 10% of -1, 10% of +2, x of +1 and the rest of 0)
share_1 <- .2
share2 <- .1
max_p <- 1-share_1-share2
steps <- 1000
xs <- seq(1/steps, max_p, 1/steps)
old_mar <- par()$mar
par(mar=c(3.1, 3.1, 0.1, 0.1))
example_grades <- cbind(share_1, max_p-xs, xs, share2)
plot(xs, aggregate_scores('n', example_grades), type='l', col='green', lwd=2, lty=1, xlim=c(0,max_p), ylim=c(-0.3,1), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[1:steps*(.5-share2)], aggregate_scores('s', example_grades[1:steps*(.5-share2),]), type='l', col='blue', lwd=2, lty=3)
lines(xs[1:steps*(.5-share2)], aggregate_scores('d', example_grades[1:steps*(.5-share2),]), type='l', col='red', lwd=2, lty=2)
lines(xs[(steps*(share_1-share2)+1):(steps*max_p)], aggregate_scores('mj', example_grades[(steps*(share_1-share2)+1):(steps*max_p),]), type='l', col='black', lwd=2, lty=1)
lines(xs[1:(steps*(share_1-share2))], aggregate_scores('mj', example_grades[1:(steps*(share_1-share2)),]), type='l', col='black', lwd=2, lty=1)
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('d', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='red', lwd=2, lty=2, ylim=c(-0.5,max_p), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('s', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='blue', lwd=2, lty=3)
legend('bottomright', col=c('red', 'blue', 'green', 'black'), lwd=2, lty=c(2,3,1,1), legend=c(expression(italic(d)), expression(italic(s)), expression(italic(n)), expression(italic(mj))), title='Score')
mtext(text = expression(paste(italic(x),  ': share of grades +1')), side = 1, line = 2.2) + mtext(text = 'Score', side = 2, line = 2.2)
par(mar=old_mar) #  (given 10% of -1, 10% of +2, x of +1 and the rest of 0)
share_1 <- .2
share2 <- .1
max_p <- 1-share_1-share2
steps <- 1000
xs <- seq(1/steps, max_p, 1/steps)
old_mar <- par()$mar
par(mar=c(3.1, 3.1, 0.1, 0.1))
example_grades <- cbind(share_1, max_p-xs, xs, share2)
plot(xs, aggregate_scores('n', example_grades), type='l', col='green', lwd=2, lty=1, xlim=c(0,max_p), ylim=c(-0.3,1), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[1:steps*(.5-share2)], aggregate_scores('s', example_grades[1:steps*(.5-share2),]), type='l', col='blue', lwd=2, lty=3)
lines(xs[1:steps*(.5-share2)], aggregate_scores('d', example_grades[1:steps*(.5-share2),]), type='l', col='red', lwd=2, lty=2)
lines(xs[(steps*(share_1-share2)+1):(steps*max_p)], aggregate_scores('mj', example_grades[(steps*(share_1-share2)+1):(steps*max_p),]), type='l', col='black', lwd=2, lty=1)
lines(xs[1:(steps*(share_1-share2))], aggregate_scores('mj', example_grades[1:(steps*(share_1-share2)),]), type='l', col='black', lwd=2, lty=1)
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('d', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='red', lwd=2, lty=2, ylim=c(-0.5,max_p), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('s', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='blue', lwd=2, lty=3)
legend('bottomright', col=c('red', 'blue', 'green', 'black'), lwd=2, lty=c(2,3,1,1), legend=c(expression(italic(d)), expression(italic(s)), expression(italic(n)), expression(italic(mj))), title='Score')
mtext(text = expression(paste(italic(x),  ': share of grades +1')), side = 1, line = 2.2) + mtext(text = 'Score', side = 2, line = 2.2)
par(mar=old_mar) #  (given 10% of -1, 10% of +2, x of +1 and the rest of 0)
source("packages_functions_data.R")
share_1 <- .2
share2 <- .1
max_p <- 1-share_1-share2
steps <- 1000
xs <- seq(1/steps, max_p, 1/steps)
old_mar <- par()$mar
par(mar=c(3.1, 3.1, 0.1, 0.1))
example_grades <- cbind(share_1, max_p-xs, xs, share2)
plot(xs, aggregate_scores('n', example_grades), type='l', col='green', lwd=2, lty=1, xlim=c(0,max_p), ylim=c(-0.3,1), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[1:steps*(.5-share2)], aggregate_scores('s', example_grades[1:steps*(.5-share2),]), type='l', col='blue', lwd=2, lty=3)
lines(xs[1:steps*(.5-share2)], aggregate_scores('d', example_grades[1:steps*(.5-share2),]), type='l', col='red', lwd=2, lty=2)
lines(xs[(steps*(share_1-share2)+1):(steps*max_p)], aggregate_scores('mj', example_grades[(steps*(share_1-share2)+1):(steps*max_p),]), type='l', col='black', lwd=2, lty=1)
lines(xs[1:(steps*(share_1-share2))], aggregate_scores('mj', example_grades[1:(steps*(share_1-share2)),]), type='l', col='black', lwd=2, lty=1)
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('d', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='red', lwd=2, lty=2, ylim=c(-0.5,max_p), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('s', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='blue', lwd=2, lty=3)
legend('bottomright', col=c('red', 'blue', 'green', 'black'), lwd=2, lty=c(2,3,1,1), legend=c(expression(italic(d)), expression(italic(s)), expression(italic(n)), expression(italic(mj))), title='Score')
mtext(text = expression(paste(italic(x),  ': share of grades +1')), side = 1, line = 2.2) + mtext(text = 'Score', side = 2, line = 2.2)
par(mar=old_mar) #  (given 10% of -1, 10% of +2, x of +1 and the rest of 0)
share_1 <- .2
share2 <- .1
max_p <- 1-share_1-share2
steps <- 1000
xs <- seq(1/steps, max_p, 1/steps)
old_mar <- par()$mar
par(mar=c(3.1, 3.1, 0.1, 0.1))
example_grades <- cbind(share_1, max_p-xs, xs, share2)
plot(xs, aggregate_scores('n', example_grades), type='l', col='green', lwd=2, lty=1, xlim=c(0,max_p), ylim=c(-0.3,1), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[1:steps*(.5-share2)], aggregate_scores('s', example_grades[1:steps*(.5-share2),]), type='l', col='blue', lwd=2, lty=3)
lines(xs[1:steps*(.5-share2)], aggregate_scores('d', example_grades[1:steps*(.5-share2),]), type='l', col='red', lwd=2, lty=2)
lines(xs[(steps*(share_1-share2)+1):(steps*max_p)], aggregate_scores('mj', example_grades[(steps*(share_1-share2)+1):(steps*max_p),]), type='l', col='black', lwd=2, lty=1)
lines(xs[1:(steps*(share_1-share2))], aggregate_scores('mj', example_grades[1:(steps*(share_1-share2)),]), type='l', col='black', lwd=2, lty=1)
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('d', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='red', lwd=2, lty=2, ylim=c(-0.5,max_p), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('s', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='blue', lwd=2, lty=3)
legend('bottomright', col=c('red', 'blue', 'green', 'black'), lwd=2, lty=c(2,3,1,1), legend=c(expression(italic(d)), expression(italic(s)), expression(italic(n)), expression(italic(mj))), title='Score')
mtext(text = expression(paste(italic(x),  ': share of grades +1')), side = 1, line = 2.2) + mtext(text = 'Score', side = 2, line = 2.2)
par(mar=old_mar) #  (given 10% of -1, 10% of +2, x of +1 and the rest of 0)
share_1 <- .2
share2 <- .1
max_p <- 1-share_1-share2
steps <- 1000
xs <- seq(1/steps, max_p, 1/steps)
old_mar <- par()$mar
par(mar=c(3.1, 3.1, 0.1, 0.1))
example_grades <- cbind(share_1, max_p-xs, xs, share2)
plot(xs, aggregate_scores('n', example_grades), type='l', col='green', lwd=2, lty=1, xlim=c(0,max_p), ylim=c(-0.3,1), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[1:steps*(.5-share2)], aggregate_scores('s', example_grades[1:steps*(.5-share2),]), type='l', col='blue', lwd=2, lty=3)
lines(xs[1:steps*(.5-share2)], aggregate_scores('d', example_grades[1:steps*(.5-share2),]), type='l', col='red', lwd=2, lty=2)
lines(xs[(steps*(share_1-share2)+1):(steps*max_p)], aggregate_scores('mj', example_grades[(steps*(share_1-share2)+1):(steps*max_p),]), type='l', col='black', lwd=2, lty=1)
lines(xs[1:(steps*(share_1-share2))], aggregate_scores('mj', example_grades[1:(steps*(share_1-share2)),]), type='l', col='black', lwd=2, lty=1)
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('d', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='red', lwd=2, lty=2, ylim=c(-0.5,max_p), ylab='', xlab='') + grid() # , xlab=expression(italic(p)), ylab='Score',
lines(xs[(steps*(.5-share2)+1):(steps*max_p)], aggregate_scores('s', example_grades[(steps*(.5-share2)+1):(steps*max_p),]), type='l', col='blue', lwd=2, lty=3)
legend('bottomright', col=c('red', 'blue', 'green', 'black'), lwd=2, lty=c(2,3,1,1), legend=c(expression(italic(d)), expression(italic(s)), expression(italic(n)), expression(italic(mj))), title='Score')
mtext(text = expression(paste(italic(x),  ': share of grades +1')), side = 1, line = 2.2) + mtext(text = 'Score', side = 2, line = 2.2)
par(mar=old_mar) #  (given 10% of -1, 10% of +2, x of +1 and the rest of 0)
package <- function(p) {
if (!is.element(p, installed.packages()[,1])) {
install.packages(p);
}
library(p, character.only = TRUE)
} # loads packages with automatical install if needed
package("devtools")
devtools::install_github("klutometis/roxygen")
getwd()
devtools::install_github("klutometis/roxygen")
create("cats")
library(roxygen2)
getwd()
create("cats")
folder <- getwd()
setwd(folder)
create("cats")
create("HighestMedianRules")
source("packages_functions_data.R")
elec2012['Hollande',]
type(elec2012['Hollande',])
typeof(elec2012['Hollande',])
elec2012
typeof(elec2012)
aggregate_scores('mj', example_grades[1:(steps*(share_1-share2)),])
setwd('./cats')
setwd('./HighestMedianRules')
##### Rules #####
#' Gauge
#'
#' This function returns a custom description of the grades of a candidate in terms of the shares of proponents (p), opponents (q), median grades (g), and the gauge (i.e. the median grade followed by + or -, a + corresponding to a larger share of proponents than opponents).
#' @param grades A numeric vector containing the shares of each grades of a candidate, from the lowest grade to the highest.
#' @param k The quantile used to compute the gauge. Default to 0.5 (the median). For more details, see paragraph Extensions in 3.2.1 of "Tie-Breaking the Highest Median", Fabre, 2020, Social Choice & Welfare.
#' @param scale A numeric vector containing the values of the scale of grades. Default to c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2))).
#' @param return A string containing the information to return. Default to 'qp' (shares of opponents and proponents). Possible values: 'g', 'p', 'q', 'pq', 'qp', 'qpg', 'pqg', 'gpq', 'gqp', 'text' (i.e. the gauge), 'all'. If the string does not match one of the above, 'all' is returned.
#' @export
#' @examples gauge(elec2012['Hollande',], return = 'gqp')
gauge <- function(grades, k = 0.5, scale = c(), return = 'qp') {
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
majo <- 0
i <- 0
while (majo < k) {
i <- i + 1
majo <- majo + grades[i]  }
p <- 1 - majo
q <- majo - grades[i]
g <- i+min(scale)-1
if (g > min(scale) & g < max(scale)) {
if (p*k > q*(1-k)) text = paste(g, "+ ", sep="")
else  text = paste(g, "- ", sep="")  }
else text = paste(g," ")
if (return=='g') return(g)
else if (return=='p') return(p)
else if (return=='q') return(q)
else if (return=='pq') return(c(p=p, q=q))
else if (return=='qp') return(c(q=q, p=p))
else if (return=='gpq') return(c(g=g, p=p, q=q))
else if (return=='gqp') return(c(g=g, q=q, p=p))
else if (return=='pgq') return(c(p=p, g=g, q=q))
else if (return=='qgp') return(c(q=q, g=g, p=p))
else if (return=='text') return(text=text)
else if (return=='all') return(c(g=g, p=p, q=q, text=text))
else return(c(g, p, q, text))
}
#' Gauges
#'
#' Aggregator of 'gauge': returns the gauge of each row (i.e. candidate) from a matrix (i.e. the voting profile). See function 'gauge'.
#' @examples gauges(grades = elec2012, return = 'gqp)
gauges <- function(grades, k = 0.5, scale = c(), return = 'qp') return(apply(grades, 1, function(x) return(gauge(x, k, scale, return))))
#' Score
#'
#' This function returns the score of a candidate, using a custom voting rule.
#' @param rule The voting rule to be used. Default to 'mj'. Possible values: 'mj' (majority judgment), 'd' (difference), 's' (relative share), 'n' (normalized difference), 'mean' (range voting). For more details, see "Tie-Breaking the Highest Median", Fabre, 2020, Social Choice & Welfare.
#' @param grades A numeric vector containing the shares of each grades of a candidate, from the lowest grade to the highest.
#' @param k The quantile used to compute the gauge. Default to 0.5 (the median). For more details, see paragraph Extensions in 3.2.1 of "Tie-Breaking the Highest Median", Fabre, 2020, Social Choice & Welfare.
#' @param scale A numeric vector containing the values of the scale of grades. Default to c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2))).
#' @param name Text to be printed along the gauge in case print = TRUE and return_text = FALSE. Defaults to "".
#' @param print Prints the gauge and the argument 'name'. Default to TRUE.
#' @param return_text Prints the gauge. Defaults to FALSE.
#' @export
#' @examples score(rule='d', elec2012['Hollande',], scale=-2:4, name="Hollande")
score <- function(rule="mj", grades=elec2012['Hollande',], k = 0.5, scale=c(), name="", print = T, return_text = FALSE) {
grades <- grades / sum(grades)
if (length(scale) != length(grades)) scale <- c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2)))
g <- gauge(grades, k, scale, 'g')
p <- gauge(grades, k, scale, 'p')
q <- gauge(grades, k, scale, 'q')
text <- gauge(grades, k, scale, 'text')
if (print & !return_text) print(paste(text, name, sep=""))
if (return_text) return(text)
else
if (rule=="MJ" | rule=="mj" | rule=="$mj$") return(as.numeric(g + (p>q)*p - (p<=q)*q))
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") return(as.numeric(g + 0.5*((p-q)/(p+q+3*10^(-8))) + 0.5*((g==max(scale))*(0.5-q) + (g==min(scale))*(p-0.5)) )) # the last two terms are for the ultimate tie-breaking rule
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") return(as.numeric(g + p - q))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") {
return(g + (p-q)/(2*(1-p-q))) }
else if (rule=="mean" | rule=="average") return(as.numeric(grades%*%scale))
else print("rule must be: mj, d, s, n or mean.")
}
#' Aggregate scores
#'
#' Aggregator of scores: returns a vector with the score of each row (i.e. candidate) in a matrix (i.e. the voting profile). See function 'score'.
#' @param grades A voting profile, i.e. a matrix with the shares of grades of each candidate on each row, from the lowest grade to the highest.
#' @param rule The voting rule to be used. Default to 'mj'. Possible values: 'mj' (majority judgment), 'd' (difference), 's' (relative share), 'n' (normalized difference), 'mean' (range voting). For more details, see "Tie-Breaking the Highest Median", Fabre, 2020, Social Choice & Welfare.
#' @param k The quantile used to compute the gauge. Default to 0.5 (the median). For more details, see paragraph Extensions in 3.2.1 of "Tie-Breaking the Highest Median", Fabre, 2020, Social Choice & Welfare.
#' @param scale A numeric vector containing the values of the scale of grades. Default to c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2))).
#' @param names String vector, each string to be printed along the gauges in case print = TRUE and return_text = FALSE. Defaults to "".
#' @param print Prints the gauges and the argument 'names'. Default to TRUE.
#' @param return_text Prints the gauges. Defaults to FALSE.
#' @param rounds Number of rounding digits. Default to 3.
#' @export
#' @examples aggregate_scores(elec2012, rule='d', scale=-2:4, names=candidats_2012)
aggregate_scores <- function(grades, rule='mj', k = 0.5, scale=c(), names = c(), print = FALSE, return_text = FALSE, rounds=3) {
# res <- matrix(ncol = length(names), nrow = 4)
if (!is.matrix(grades)) grades <- matrix(grades, nrow = 1)
if (any(grades < 0)) print('WARNING: some shares of grades are negative!')
if (nrow(grades)!=length(names)) names <- c(1:length(nrow(grades)))
if (ncol(grades)!=length(scale)) scale <- c((floor(-ncol(grades)/2)+1):(ncol(grades)+floor(-ncol(grades)/2)))
res <- c()
# for (i in 1:ncol(grades)) res[,i] <- gauge(grades[,i], k, names[i])
for (i in 1:nrow(grades)) {
if (rule=="MJ" | rule=="mj" | rule=="$mj$") res <- c(res, score(rule='mj', grades[i,], k, names[i], print, return_text, scale))
else if (rule=='s' | rule=='S' | rule=='sigma' | rule=="$\\sigma$" | rule=="$s$") res <- c(res, score(rule='s', grades[i,], k, names[i], print, return_text, scale))
else if (rule=="D" | rule=="d" | rule=="delta" | rule=="Delta" | rule=="$\\Delta$" | rule=="$d$") res <- c(res, score(rule='d', grades[i,], k, names[i], print, return_text, scale))
else if (rule=='mean' | rule=='average') res <- c(res, score(rule='mean', grades[i,], k, names[i], print, return_text, scale))
else if (rule=="N" | rule=="n" | rule=="nu" | rule=="$\\nu$" | rule=="$n$") res <- c(res, score(rule='n', grades[i,], k, names[i], print, return_text, scale))
}
if (return_text) return(res)
else if (rounds) return(round(as.numeric(res), rounds))
else return(as.numeric(res))
}
#' Ranking
#'
#' Returns a matrix with the scores of candidates sorted in decreasing order, for a given voting rule.
#' @param grades A voting profile, i.e. a matrix with the shares of grades of each candidate on each row, from the lowest grade to the highest.
#' @param rule The voting rule to be used. Default to 'mj'. Possible values: 'mj' (majority judgment), 'd' (difference), 's' (relative share), 'n' (normalized difference), 'mean' (range voting). For more details, see "Tie-Breaking the Highest Median", Fabre, 2020, Social Choice & Welfare.
#' @param k The quantile used to compute the gauge. Default to 0.5 (the median). For more details, see paragraph Extensions in 3.2.1 of "Tie-Breaking the Highest Median", Fabre, 2020, Social Choice & Welfare.
#' @param scale A numeric vector containing the values of the scale of grades. Default to c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2))).
#' @param names String vector, each string to be printed in case print = TRUE. Defaults to c().
#' @param print Prints the argument 'names'. Default to FALSE
#' @export
#' @examples ranking(elec2012, rule='d', scale=-2:4, names=candidats_2012)
ranking <- function(grades, rule='mj', k = 0.5, scale=c(), names = c(), print = FALSE) {
res <- matrix(nrow = nrow(grades), ncol = 3)
scores <- aggregate_scores(rule=rule, grades, k, names, print, scale=scale)
scores_text <- aggregate_scores(rule=rule, grades, k, names, print, return_text = TRUE, scale=scale)
res[,1] <- names[order(scores, decreasing = TRUE)]
res[,2] <- scores_text[order(scores, decreasing = TRUE)]
res[,3] <- sort(scores, decreasing = TRUE)
return(res)
}
#' Rankings
#'
#' Returns a matrix with the scores of candidates sorted in decreasing order of score mj, for the five following voting rules (with k=0.5): mj, d, s, n, mean. See function 'score' for more details.
#' @param grades A voting profile, i.e. a matrix with the shares of grades of each candidate on each row, from the lowest grade to the highest.
#' @param scale A numeric vector containing the values of the scale of grades. Default to c((floor(-length(grades)/2)+1):(length(grades)+floor(-length(grades)/2))).
#' @param names String vector, each string to be printed in case print = TRUE. Defaults to c().
#' @param return_distances If TRUE, returns the Kendall distance between the rules (using AllKendall) instead of the matrix of scores. Default to FALSE.
#' @param rounds If TRUE, rounds the scores (to 3 digits for highest median rules and 2 digits for range voting). Default to TRUE.
#' @export
#' @examples ranking(elec2012, rule='d', scale=-2:4, names=candidats_2012)
rankings <- function(grades, scale=c(), names = c(), return_distance=FALSE, rounds=T) {
scores <- aggregate_scores(rule='mj', grades=grades, names=names, scale=scale, rounds = 3*rounds)
scores_text <- aggregate_scores(rule='mj', grades=grades, names=names, return_text = TRUE, scale=scale, rounds = 3*rounds)
res <- data.frame(matrix(nrow = nrow(grades), ncol = 7))
res[,1] <- names[order(scores, decreasing = TRUE)]
res[,2] <- aggregate_scores(rule='mean', grades=grades, names=names, scale=scale, rounds = 2*rounds)[order(scores, decreasing = TRUE)]
res[,3] <- scores_text[order(scores, decreasing = TRUE)]
res[,4] <- sort(scores, decreasing = TRUE)
res[,5] <- aggregate_scores(rule='d', grades=grades, names=names, scale=scale, rounds = 3*rounds)[order(scores, decreasing = TRUE)]
res[,6] <- aggregate_scores(rule='s', grades=grades, names=names, scale=scale, rounds = 3*rounds)[order(scores, decreasing = TRUE)]
res[,7] <- aggregate_scores(rule='n', grades=grades, names=names, scale=scale, rounds = 3*rounds)[order(scores, decreasing = TRUE)]
colnames(res) <- c('choices', 'mean', 'MG', '$mj$', '$d$', '$s$', '$n$') # c('choices', 'mean', 'MG', '$mj$', '$\\Delta$', '$\\sigma$', '$\\nu$') c('choices', 'mean', 'MG', 'MJ', 's', 'D', 'n')
all_orders <- do.call("rbind", lapply(list(aggregate_scores(rule='mean', grades=grades, names=names, scale=scale, rounds=F), aggregate_scores(grades=grades, names=names, scale=scale, rounds=F),
aggregate_scores(rule='d', grades=grades, names=names, scale=scale, rounds=F), aggregate_scores(rule='s', grades=grades, names=names, scale=scale, rounds=F),
aggregate_scores(rule='n', grades=grades, names=names, scale=scale, rounds=F)), rank))
distances <- AllKendall(all_orders, all_orders)
colnames(distances) <- rownames(distances) <- c('mean', '$mj$', '$d$', '$s$', '$n$') # c('mean', '$mj$', '$\\Delta$', '$\\sigma$', '$\\nu$') c('mj', 's', 'd', 'mean', 'n')
if (return_distance) return(distances)
else return(res)
}
document()
setwd('..')
install("HighestMedianRules")
package <- function(p) {
if (!is.element(p, installed.packages()[,1])) {
install.packages(p);
}
library(p, character.only = TRUE)
} # loads packages with automatical install if needed
setwd('./HighestMedianRules')
rm(list=ls())
ls()
# devtools::install_github("klutometis/roxygen")
# library(roxygen2)
package("roxygen2")
package("devtools")
document()
getwd()
setwd('./HighestMedianRules')
document()
package <- function(p) {
if (!is.element(p, installed.packages()[,1])) {
install.packages(p);
}
library(p, character.only = TRUE)
} # loads packages with automatical install if needed
package("devtools")
# devtools::install_github("klutometis/roxygen")
# library(roxygen2)
package("roxygen2")
setwd("/Downloads")
setwd("Downloads")
setwd("~/Downloads")
create("cats")
